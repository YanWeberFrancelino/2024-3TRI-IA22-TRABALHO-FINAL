,
    {
      "nome": "Curso de Java",
      "descricao": "Aprenda Java para desenvolvimento de aplicações robustas, explorando desde os fundamentos até tópicos avançados como coleções e manipulação de exceções.",
      "imagem": "java.jpg",
      "modulos": [
        {
          "nome": "Introdução ao Java",
          "ordem": 1,
          "aulas": [
            {
              "titulo": "História do Java",
              "conteudo": "Java foi desenvolvido pela Sun Microsystems em 1995, com o objetivo de criar uma linguagem de programação que fosse portátil, robusta e segura. Ao longo dos anos, Java evoluiu para se tornar uma das linguagens mais populares para desenvolvimento de aplicações empresariais, Android, web e muito mais.\n\n### Evolução do Java\n\n- **1995**: Lançamento do Java 1.0.\n- **1998**: Java 2 introduzido com várias melhorias.\n- **2006**: Oracle adquire a Sun Microsystems.\n- **2014**: Introdução do Java 8 com Lambdas e Streams.\n- **2021**: Lançamento do Java 17 como LTS (Long-Term Support).\n\n### Características do Java\n\n- **Portabilidade**: \"Write Once, Run Anywhere\" (WORA) graças à JVM.\n- **Orientação a Objetos**: Estrutura modular e reutilizável.\n- **Segurança**: Ambiente seguro para execução de aplicações.\n- **Multithreading**: Suporte nativo para operações concorrentes.\n\n### Exemplo Básico em Java\n\n```java
// Classe principal
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Olá, Mundo!");
    }
}
```\n\n### Compilação e Execução\n\n1. **Compilar o Código**:\n   ```bash\n   javac HelloWorld.java\n   ```\n2. **Executar o Programa**:\n   ```bash\n   java HelloWorld\n   ```\n   Saída:\n   ```\n   Olá, Mundo!\n   ```\n\nEste exemplo básico demonstra como criar, compilar e executar um programa simples em Java.",
              "ordem": 1,
              "quizzes": []
            },
            {
              "titulo": "Configuração do Ambiente",
              "conteudo": "Para programar em Java, você precisa instalar o Java Development Kit (JDK) e configurar as variáveis de ambiente. Além disso, escolha um ambiente de desenvolvimento integrado (IDE) como IntelliJ IDEA, Eclipse ou NetBeans para facilitar a escrita e gerenciamento do código.\n\n### Passos para Instalação\n\n1. **Baixar o JDK**:\n   - Acesse o site oficial da Oracle ou utilize versões open-source como OpenJDK.\n   - [Oracle JDK](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html)\n   - [OpenJDK](https://openjdk.java.net/)\n\n2. **Instalar o JDK**:\n   - Siga as instruções do instalador para o seu sistema operacional.\n\n3. **Configurar Variáveis de Ambiente**:\n   - **JAVA_HOME**: Caminho para o diretório de instalação do JDK.\n   - **Path**: Adicionar `%JAVA_HOME%\\bin` no Windows ou `$JAVA_HOME/bin` no macOS/Linux.\n\n4. **Verificar Instalação**:\n   Abra o terminal ou prompt de comando e execute:\n   ```bash\n   java -version\n   javac -version\n   ```\n   Isso deve exibir as versões instaladas do Java Runtime Environment (JRE) e do compilador Java (`javac`).\n\n### Escolhendo uma IDE\n\n- **IntelliJ IDEA**: Conhecida por sua interface amigável e recursos avançados de refatoração.\n- **Eclipse**: Uma das IDEs mais populares, com vasta gama de plugins.\n- **NetBeans**: IDE oficial da Oracle, integrada com várias ferramentas de desenvolvimento.\n\n### Exemplo de Configuração no IntelliJ IDEA\n\n1. **Criar um Novo Projeto**:\n   - Abra o IntelliJ IDEA e selecione \"Create New Project\".\n   - Escolha \"Java\" e configure o SDK apontando para o JDK instalado.\n\n2. **Configurar o Projeto**:\n   - Defina o nome do projeto e o diretório de localização.\n   - Finalize a criação do projeto.\n\n3. **Escrever Código**:\n   - Crie uma nova classe Java e escreva seu código.\n\n4. **Executar o Programa**:\n   - Clique com o botão direito no arquivo Java e selecione \"Run\".\n\nConfigurar corretamente o ambiente de desenvolvimento é essencial para garantir uma experiência de programação eficiente e sem erros.",
              "ordem": 2,
              "quizzes": []
            }
          ]
        },
        {
          "nome": "Sintaxe Básica",
          "ordem": 2,
          "aulas": [
            {
              "titulo": "Tipos de Dados e Variáveis",
              "conteudo": "Java é uma linguagem fortemente tipada, o que significa que todas as variáveis devem ter um tipo declarado. Aprenda sobre os tipos de dados primitivos (`int`, `double`, `char`, `boolean`, etc.) e como declarar e inicializar variáveis.\n\n### Tipos de Dados Primitivos\n\n- **int**: Inteiros de 32 bits.\n- **double**: Números de ponto flutuante de 64 bits.\n- **char**: Caractere único de 16 bits.\n- **boolean**: Valores lógicos `true` ou `false`.\n- **byte**, **short**, **long**, **float**: Outros tipos numéricos com diferentes capacidades.\n\n### Declaração de Variáveis\n\n```java
public class Variaveis {
    public static void main(String[] args) {
        int idade = 25;
        double salario = 4500.50;
        char inicial = 'J';
        boolean empregado = true;

        System.out.println("Idade: " + idade);
        System.out.println("Salário: " + salario);
        System.out.println("Inicial: " + inicial);
        System.out.println("Empregado: " + empregado);
    }
}
```\n\n### Regras para Nomes de Variáveis\n\n- Devem começar com uma letra, `$` ou `_`.\n- Podem conter letras, dígitos, `$` e `_`.\n- São case-sensitive (diferenciam maiúsculas de minúsculas).\n- Não podem ser palavras reservadas.\n\n### Exemplo de Nomes Válidos e Inválidos\n\n```java
int numero1;      // Válido
double _valor;    // Válido
char $letra;      // Válido
boolean isValid;  // Válido

int 1numero;      // Inválido
double valor!;    // Inválido
char class;       // Inválido (palavra reservada)
```\n\n### Tipos de Dados Não Primitivos\n\nAlém dos tipos primitivos, Java possui tipos de dados não primitivos como Strings, Arrays e Classes Personalizadas.\n\n```java
public class TiposNaoPrimitivos {
    public static void main(String[] args) {
        String nome = "Ana";
        int[] numeros = {1, 2, 3, 4, 5};
        
        System.out.println("Nome: " + nome);
        System.out.print("Números: ");
        for(int num : numeros) {
            System.out.print(num + " ");
        }
    }
}
```\n\n### Boas Práticas\n\n- **Nomes Descritivos**: Use nomes que descrevam o propósito da variável.\n- **CamelCase**: Utilize a convenção camelCase para nomes de variáveis e métodos.\n- **Evite Abreviações Excessivas**: Nomes claros facilitam a manutenção do código.\n\nCompreender os tipos de dados e a declaração de variáveis é fundamental para escrever código Java eficiente e sem erros.",
              "ordem": 1,
              "quizzes": []
            },
            {
              "titulo": "Estruturas de Controle",
              "conteudo": "Utilize estruturas de controle como `if`, `else`, `switch`, `for`, `while` e `do-while` para controlar o fluxo de execução do seu programa. Entenda como construir loops eficientes e como evitar erros comuns como loops infinitos.\n\n### Estrutura Condicional: if-else\n\n```java
public class Condicionais {
    public static void main(String[] args) {
        int numero = 10;

        if (numero > 0) {
            System.out.println(numero + " é positivo.");
        } else if (numero < 0) {
            System.out.println(numero + " é negativo.");
        } else {
            System.out.println("O número é zero.");
        }
    }
}
```\n\n### Estrutura Condicional: switch\n\n```java
public class SwitchExemplo {
    public static void main(String[] args) {
        String dia = "Terça-feira";

        switch (dia) {
            case "Segunda-feira":
                System.out.println("Início da semana.");
                break;
            case "Terça-feira":
                System.out.println("Segundo dia da semana.");
                break;
            default:
                System.out.println("Outro dia da semana.");
        }
    }
}
```\n\n### Loops: for\n\n```java
public class LoopFor {
    public static void main(String[] args) {
        for(int i = 1; i <= 5; i++) {
            System.out.println("Número: " + i);
        }
    }
}
```\n\n### Loops: while\n\n```java
public class LoopWhile {
    public static void main(String[] args) {
        int contador = 1;
        while(contador <= 5) {
            System.out.println("Contador: " + contador);
            contador++;
        }
    }
}
```\n\n### Loops: do-while\n\n```java
public class LoopDoWhile {
    public static void main(String[] args) {
        int contador = 1;
        do {
            System.out.println("Contador: " + contador);
            contador++;
        } while(contador <= 5);
    }
}
```\n\n### Evitando Loops Infinitos\n\nCertifique-se de que a condição do loop será eventualmente falsa. Verifique incrementos e decrementos corretamente para evitar que o loop nunca termine.\n\n```java
public class LoopSeguro {
    public static void main(String[] args) {
        int contador = 0;
        while(contador < 5) {
            System.out.println("Contador: " + contador);
            contador++; // Incremento para evitar loop infinito
        }
    }
}
```\n\n### Exemplos Práticos\n\nCombinar estruturas de controle para resolver problemas mais complexos.\n\n```java
public class ExemploPratico {
    public static void main(String[] args) {
        int[] numeros = {1, 2, 3, 4, 5};
        int soma = 0;

        for(int num : numeros) {
            if(num % 2 == 0) {
                soma += num;
            }
        }

        System.out.println("Soma dos números pares: " + soma);
    }
}
```\n\nNeste exemplo, iteramos sobre um array de números, verificamos se cada número é par e acumulamos a soma dos números pares.",
              "ordem": 2,
              "quizzes": []
            }
          ]
        },
        {
          "nome": "Programação Orientada a Objetos em Java",
          "ordem": 3,
          "aulas": [
            {
              "titulo": "Classes e Objetos",
              "conteudo": "Em Java, tudo é orientado a objetos. Aprenda a definir classes, criar objetos, e entender conceitos como atributos (variáveis de instância) e métodos (funções). Explore o conceito de encapsulamento para proteger os dados dentro das classes.\n\n### Definindo uma Classe\n\n```java
public class Carro {
    // Atributos (variáveis de instância)
    private String modelo;
    private String cor;
    private int ano;

    // Construtor
    public Carro(String modelo, String cor, int ano) {
        this.modelo = modelo;
        this.cor = cor;
        this.ano = ano;
    }

    // Métodos (funções)
    public void exibirInformacoes() {
        System.out.println("Modelo: " + modelo);
        System.out.println("Cor: " + cor);
        System.out.println("Ano: " + ano);
    }

    // Getters e Setters
    public String getModelo() {
        return modelo;
    }

    public void setModelo(String modelo) {
        this.modelo = modelo;
    }

    public String getCor() {
        return cor;
    }

    public void setCor(String cor) {
        this.cor = cor;
    }

    public int getAno() {
        return ano;
    }

    public void setAno(int ano) {
        this.ano = ano;
    }
}
```\n\n### Criando e Utilizando Objetos\n\n```java
public class Main {
    public static void main(String[] args) {
        // Criando um objeto da classe Carro
        Carro meuCarro = new Carro("Fiat Uno", "Vermelho", 2020);

        // Utilizando métodos do objeto
        meuCarro.exibirInformacoes();

        // Modificando atributos usando setters
        meuCarro.setCor("Azul");
        meuCarro.setAno(2021);

        // Exibindo informações atualizadas
        meuCarro.exibirInformacoes();
    }
}
```\n\n### Encapsulamento\n\nEncapsulamento é o princípio de esconder os detalhes internos de uma classe e expor apenas o necessário através de métodos públicos (getters e setters). Isso protege os dados e garante que sejam manipulados de forma controlada.\n\n### Vantagens do Encapsulamento\n\n- **Segurança**: Protege os dados de acessos não autorizados.\n- **Manutenção**: Facilita a modificação do código sem afetar outras partes.\n- **Flexibilidade**: Permite controlar como os dados são acessados e modificados.\n\n### Exemplo de Encapsulamento\n\n```java
public class ContaBancaria {
    private double saldo;

    // Construtor
    public ContaBancaria(double saldoInicial) {
        this.saldo = saldoInicial;
    }

    // Método para depositar
    public void depositar(double valor) {
        if(valor > 0) {
            saldo += valor;
            System.out.println("Depositado: " + valor);
        } else {
            System.out.println("Valor de depósito inválido.");
        }
    }

    // Método para sacar
    public void sacar(double valor) {
        if(valor > 0 && valor <= saldo) {
            saldo -= valor;
            System.out.println("Sacado: " + valor);
        } else {
            System.out.println("Saldo insuficiente ou valor inválido.");
        }
    }

    // Getter para saldo
    public double getSaldo() {
        return saldo;
    }
}

public class Main {
    public static void main(String[] args) {
        ContaBancaria minhaConta = new ContaBancaria(1000.0);
        minhaConta.depositar(500.0);
        minhaConta.sacar(200.0);
        System.out.println("Saldo atual: " + minhaConta.getSaldo());
    }
}
```\n\nNeste exemplo, os métodos `depositar` e `sacar` controlam como o saldo pode ser modificado, garantindo que operações inválidas não sejam realizadas.",
              "ordem": 1,
              "quizzes": []
            },
            {
              "titulo": "Herança e Interfaces",
              "conteudo": "Implemente herança para criar hierarquias de classes, permitindo a reutilização de código. Utilize interfaces para definir contratos que as classes devem seguir, promovendo a flexibilidade e a modularidade no design do seu software.\n\n### Herança em Java\n\nHerança permite que uma classe herde atributos e métodos de outra classe.\n\n```java
// Classe base
public class Animal {
    public void fazerSom() {
        System.out.println("O animal faz um som.");
    }
}

// Classe derivada
public class Cachorro extends Animal {
    @Override
    public void fazerSom() {
        System.out.println("O cachorro late.");
    }

    public void correr() {
        System.out.println("O cachorro está correndo.");
    }
}

public class Main {
    public static void main(String[] args) {
        Cachorro meuCachorro = new Cachorro();
        meuCachorro.fazerSom(); // O cachorro late.
        meuCachorro.correr();    // O cachorro está correndo.
    }
}
```\n\n### Interfaces em Java\n\nInterfaces definem contratos que as classes devem seguir, especificando quais métodos devem ser implementados.\n\n```java
// Definição da interface
public interface Volador {
    void voar();
}

// Implementação da interface em uma classe
public class Pato implements Volador {
    @Override
    public void voar() {
        System.out.println("O pato está voando.");
    }
}

public class Main {
    public static void main(String[] args) {
        Pato pato = new Pato();
        pato.voar(); // O pato está voando.
    }
}
```\n\n### Benefícios da Herança e Interfaces\n\n- **Reutilização de Código**: Evita duplicação de código ao herdar comportamentos comuns.\n- **Flexibilidade**: Interfaces permitem que classes não relacionadas compartilhem um contrato comum.\n- **Manutenção**: Facilita a atualização de funcionalidades sem afetar classes derivadas.\n\n### Polimorfismo com Interfaces\n\nPolimorfismo permite que objetos de diferentes classes sejam tratados de forma uniforme através de interfaces.\n\n```java
public interface Desenhavel {
    void desenhar();
}

public class Circulo implements Desenhavel {
    @Override
    public void desenhar() {
        System.out.println("Desenhando um círculo.");
    }
}

public class Quadrado implements Desenhavel {
    @Override
    public void desenhar() {
        System.out.println("Desenhando um quadrado.");
    }
}

public class Main {
    public static void main(String[] args) {
        Desenhavel forma1 = new Circulo();
        Desenhavel forma2 = new Quadrado();

        forma1.desenhar(); // Desenhando um círculo.
        forma2.desenhar(); // Desenhando um quadrado.
    }
}
```\n\nCompreender herança e interfaces é essencial para criar sistemas bem estruturados e escaláveis em Java.",
              "ordem": 2,
              "quizzes": []
            },
            {
              "titulo": "Métodos Especiais e Dunder Methods",
              "conteudo": "Em Java, métodos especiais incluem construtores e métodos de sobrescrita (`@Override`). Embora Java não possua dunder methods como Python, conceitos similares podem ser aplicados através de métodos como `toString()`, `equals()` e `hashCode()` para definir comportamentos personalizados.\n\n### Método toString()\n\nO método `toString()` é usado para retornar uma representação em string do objeto.\n\n```java
public class Livro {
    private String titulo;
    private String autor;

    public Livro(String titulo, String autor) {
        this.titulo = titulo;
        this.autor = autor;
    }

    @Override
    public String toString() {
        return "Livro: " + titulo + " por " + autor;
    }

    public static void main(String[] args) {
        Livro livro = new Livro("1984", "George Orwell");
        System.out.println(livro); // Livro: 1984 por George Orwell
    }
}
```\n\n### Métodos equals() e hashCode()\n\nEstes métodos são usados para comparar objetos e gerenciar coleções que dependem de hashing, como `HashSet` e `HashMap`.\n\n```java
public class Pessoa {
    private String nome;
    private int idade;

    public Pessoa(String nome, int idade) {
        this.nome = nome;
        this.idade = idade;
    }

    @Override
    public boolean equals(Object obj) {
        if(this == obj) return true;
        if(obj == null || getClass() != obj.getClass()) return false;
        Pessoa pessoa = (Pessoa) obj;
        return idade == pessoa.idade && nome.equals(pessoa.nome);
    }

    @Override
    public int hashCode() {
        return Objects.hash(nome, idade);
    }

    public static void main(String[] args) {
        Pessoa p1 = new Pessoa("Lucas", 25);
        Pessoa p2 = new Pessoa("Lucas", 25);
        Pessoa p3 = new Pessoa("Maria", 30);

        System.out.println(p1.equals(p2)); // true
        System.out.println(p1.equals(p3)); // false
    }
}
```\n\n### Benefícios da Sobrescrita de Métodos\n\n- **Personalização**: Permite definir comportamentos específicos para métodos herdados.\n- **Legibilidade**: Facilita a depuração e a compreensão do código através de representações claras dos objetos.\n\n### Exemplo Completo\n\n```java
public class Main {
    public static void main(String[] args) {
        Livro livro = new Livro("O Senhor dos Anéis", "J.R.R. Tolkien");
        System.out.println(livro); // Livro: O Senhor dos Anéis por J.R.R. Tolkien

        Pessoa pessoa1 = new Pessoa("Ana", 28);
        Pessoa pessoa2 = new Pessoa("Ana", 28);
        Pessoa pessoa3 = new Pessoa("Pedro", 35);

        System.out.println(pessoa1.equals(pessoa2)); // true
        System.out.println(pessoa1.equals(pessoa3)); // false
    }
}
```\n\nEste exemplo demonstra como sobrescrever métodos para definir representações personalizadas e comparações entre objetos.",
              "ordem": 3,
              "quizzes": []
            }
          ]
        },
        {
          "nome": "Avançado em Java",
          "ordem": 4,
          "aulas": [
            {
              "titulo": "Coleções em Java",
              "conteudo": "A API de Coleções em Java fornece estruturas de dados prontas para uso, como `ArrayList`, `LinkedList`, `HashSet`, `HashMap`, entre outras. Aprenda a escolher a estrutura adequada para diferentes necessidades, e como utilizá-las eficientemente.\n\n### Listas\n\n- **ArrayList**: Implementação baseada em array, eficiente para acesso por índice e inserções no final.\n- **LinkedList**: Implementação baseada em nós, eficiente para inserções e remoções em qualquer posição.\n\n### Conjuntos\n\n- **HashSet**: Implementação baseada em hash, não mantém a ordem dos elementos e não permite duplicatas.\n- **TreeSet**: Mantém os elementos ordenados e não permite duplicatas.\n\n### Mapas\n\n- **HashMap**: Implementação baseada em hash, permite chaves e valores nulos.\n- **TreeMap**: Mantém as chaves ordenadas.\n\n### Exemplo de Uso de ArrayList\n\n```java
import java.util.ArrayList;

public class ArrayListExemplo {
    public static void main(String[] args) {
        ArrayList<String> frutas = new ArrayList<>();

        // Adicionando elementos
        frutas.add("Maçã");
        frutas.add("Banana");
        frutas.add("Laranja");

        // Acessando elementos
        System.out.println(frutas.get(1)); // Banana

        // Iterando sobre a lista
        for(String fruta : frutas) {
            System.out.println(fruta);
        }

        // Removendo um elemento
        frutas.remove("Banana");
        System.out.println(frutas); // [Maçã, Laranja]
    }
}
```\n\n### Exemplo de Uso de HashMap\n\n```java
import java.util.HashMap;

public class HashMapExemplo {
    public static void main(String[] args) {
        HashMap<String, Integer> idadePessoas = new HashMap<>();

        // Adicionando elementos
        idadePessoas.put("João", 30);
        idadePessoas.put("Maria", 25);
        idadePessoas.put("Pedro", 35);

        // Acessando elementos
        System.out.println("Idade de Maria: " + idadePessoas.get("Maria")); // 25

        // Iterando sobre o HashMap
        for(String chave : idadePessoas.keySet()) {
            System.out.println(chave + " tem " + idadePessoas.get(chave) + " anos.");
        }

        // Removendo um elemento
        idadePessoas.remove("Pedro");
        System.out.println(idadePessoas); // {João=30, Maria=25}
    }
}
```\n\n### Escolhendo a Estrutura Adequada\n\n- **ArrayList vs. LinkedList**:\n  - Use `ArrayList` para acesso rápido por índice.\n  - Use `LinkedList` para inserções e remoções frequentes.\n\n- **HashSet vs. TreeSet**:\n  - Use `HashSet` quando não precisar de ordem.\n  - Use `TreeSet` quando precisar de elementos ordenados.\n\n- **HashMap vs. TreeMap**:\n  - Use `HashMap` para operações rápidas sem necessidade de ordenação.\n  - Use `TreeMap` quando precisar de chaves ordenadas.\n\n### Boas Práticas\n\n- **Escolha a Estrutura Adequada**: Compreender as características de cada estrutura ajuda a otimizar o desempenho.\n- **Evite Duplicatas**: Use `Set` quando precisar garantir que não haja elementos duplicados.\n- **Mapeamento Eficiente**: Use `Map` para relacionamentos chave-valor eficientes.\n\nA API de Coleções é uma das ferramentas mais poderosas em Java, permitindo que desenvolvedores manipulem dados de forma eficiente e organizada.",
              "ordem": 1,
              "quizzes": []
            },
            {
              "titulo": "Manipulação de Exceções",
              "conteudo": "Gerencie erros e exceções de forma eficiente utilizando blocos `try`, `catch`, `finally`, e criando suas próprias exceções personalizadas. Entenda a hierarquia de exceções em Java e como garantir que seu programa seja robusto e confiável.\n\n### Tratamento Básico de Exceções\n\n```java
public class ExcecaoExemplo {
    public static void main(String[] args) {
        try {
            int resultado = 10 / 0; // Isso causará uma ArithmeticException
            System.out.println("Resultado: " + resultado);
        } catch (ArithmeticException e) {
            System.out.println("Erro: Não é possível dividir por zero.");
        } finally {
            System.out.println("Bloco finally executado.");
        }
    }
}
```\n\n### Criando Exceções Personalizadas\n\n```java
// Definindo uma exceção personalizada
public class ExcecaoPersonalizada extends Exception {
    public ExcecaoPersonalizada(String mensagem) {
        super(mensagem);
    }
}

// Usando a exceção personalizada
public class TesteExcecao {
    public static void main(String[] args) {
        try {
            verificarNumero(5);
            verificarNumero(-1);
        } catch (ExcecaoPersonalizada e) {
            System.out.println("Erro: " + e.getMessage());
        }
    }

    public static void verificarNumero(int numero) throws ExcecaoPersonalizada {
        if(numero < 0) {
            throw new ExcecaoPersonalizada("Número negativo não é permitido: " + numero);
        } else {
            System.out.println("Número válido: " + numero);
        }
    }
}
```\n\n### Hierarquia de Exceções em Java\n\n- **Throwable**: Classe base para todas as exceções e erros.\n  - **Exception**: Erros recuperáveis que o programa pode tentar tratar.\n    - **RuntimeException**: Exceções que ocorrem durante a execução do programa, como `NullPointerException` e `ArithmeticException`.\n  - **Error**: Erros graves que não devem ser tratados, como `OutOfMemoryError`.\n\n### Exemplo de Uso de Throws\n\n```java
public class ThrowsExemplo {
    public static void main(String[] args) {
        try {
            metodoA();
        } catch (IOException e) {
            System.out.println("Erro de IO: " + e.getMessage());
        }
    }

    public static void metodoA() throws IOException {
        metodoB();
    }

    public static void metodoB() throws IOException {
        throw new IOException("Erro ao ler o arquivo.");
    }
}
```\n\n### Boas Práticas no Tratamento de Exceções\n\n- **Capturar Especificamente**: Capture exceções específicas em vez de usar `Exception` genérico.\n- **Evitar Uso Excessivo de Exceções**: Utilize exceções para situações excepcionais, não para controle de fluxo normal.\n- **Adicionar Mensagens Informativas**: Forneça mensagens claras para facilitar a depuração.\n- **Usar o Bloco Finally Quando Necessário**: Execute código que deve ocorrer independentemente do sucesso ou falha da operação.\n\nGerenciar exceções adequadamente é essencial para criar aplicações Java robustas e confiáveis.",
              "ordem": 2,
              "quizzes": []
            }
          ]
        }
      ]
    },
    {
      "nome": "Curso de C#",
      "descricao": "Desenvolva aplicações com C# e o .NET Framework, aprendendo desde os conceitos básicos até técnicas avançadas como LINQ e programação assíncrona.",
      "imagem": "csharp.jpg",
      "modulos": [
        {
          "nome": "Introdução ao C#",
          "ordem": 1,
          "aulas": [
            {
              "titulo": "História do C#",
              "conteudo": "C# foi desenvolvido pela Microsoft como parte da plataforma .NET no início dos anos 2000. Inspirado em linguagens como Java e C++, C# é uma linguagem de programação moderna, orientada a objetos e fortemente tipada.\n\n### Evolução do C#\n\n- **2000**: Início do desenvolvimento do C#.\n- **2002**: Lançamento do C# 1.0 com o .NET Framework 1.0.\n- **2005**: C# 2.0 introduz Generics e Iteradores.\n- **2008**: C# 3.0 introduz LINQ e expressões lambda.\n- **2017**: C# 7.0 introduz padrões de correspondência e tuplas.\n- **2020**: C# 9.0 introduz registros e aprimoramentos de sintaxe.\n\n### Características do C#\n\n- **Orientação a Objetos**: Suporta classes, herança, encapsulamento e polimorfismo.\n- **Sintaxe Limpa**: Facilita a leitura e manutenção do código.\n- **Interoperabilidade**: Integra-se facilmente com outras linguagens e plataformas.\n- **Gestão de Memória**: Coletor de lixo automático gerencia a memória.\n\n### Exemplo Básico em C#\n\n```csharp
using System;

namespace HelloWorld
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Olá, Mundo!");
        }
    }
}
```\n\n### Compilação e Execução\n\n1. **Instalar o .NET SDK**:\n   - Baixe e instale o SDK do .NET a partir do [site oficial](https://dotnet.microsoft.com/download).\n\n2. **Criar um Novo Projeto**:\n   ```bash\n   dotnet new console -n MeuProjeto\n   ```\n\n3. **Navegar para o Diretório do Projeto**:\n   ```bash\n   cd MeuProjeto\n   ```\n\n4. **Compilar e Executar o Programa**:\n   ```bash\n   dotnet run\n   ```\n   Saída:\n   ```\n   Olá, Mundo!\n   ```\n\nEste exemplo básico demonstra como criar, compilar e executar um programa simples em C#.",
              "ordem": 1,
              "quizzes": []
            },
            {
              "titulo": "Configuração do Ambiente",
              "conteudo": "Para programar em C#, você precisa instalar o Visual Studio ou Visual Studio Code com as extensões necessárias. Além disso, instale o .NET SDK para compilar e executar seus projetos.\n\n### Passos para Instalação do Visual Studio\n\n1. **Baixar o Visual Studio**:\n   - Acesse [visualstudio.microsoft.com](https://visualstudio.microsoft.com/) e baixe a versão Community (gratuita) ou uma versão paga se preferir.\n\n2. **Selecionar Cargas de Trabalho**:\n   - Durante a instalação, selecione a carga de trabalho \"Desenvolvimento para Desktop com C#\" para aplicações Windows Forms ou WPF.\n   - Para desenvolvimento web, selecione \"Desenvolvimento Web e ASP.NET\".\n\n3. **Instalar o .NET SDK**:\n   - O Visual Studio geralmente inclui o .NET SDK, mas você pode baixar manualmente em [dotnet.microsoft.com](https://dotnet.microsoft.com/download) se necessário.\n\n### Configuração do Visual Studio Code\n\n1. **Instalar o Visual Studio Code**:\n   - Baixe e instale a par